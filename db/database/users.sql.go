// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, username, profile_picture, bio)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio
`

type CreateUserParams struct {
	Email          string      `json:"email"`
	PasswordHash   string      `json:"password_hash"`
	Username       string      `json:"username"`
	ProfilePicture pgtype.Text `json:"profile_picture"`
	Bio            pgtype.Text `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.ProfilePicture,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getLeaderBoard = `-- name: GetLeaderBoard :many
SELECT id, username, last_place_count, profile_picture, bio
FROM users
ORDER BY last_place_count DESC
LIMIT $1 OFFSET $2
`

type GetLeaderBoardParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetLeaderBoardRow struct {
	ID             uuid.UUID   `json:"id"`
	Username       string      `json:"username"`
	LastPlaceCount int32       `json:"last_place_count"`
	ProfilePicture pgtype.Text `json:"profile_picture"`
	Bio            pgtype.Text `json:"bio"`
}

func (q *Queries) GetLeaderBoard(ctx context.Context, arg GetLeaderBoardParams) ([]GetLeaderBoardRow, error) {
	rows, err := q.db.Query(ctx, getLeaderBoard, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLeaderBoardRow{}
	for rows.Next() {
		var i GetLeaderBoardRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.LastPlaceCount,
			&i.ProfilePicture,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const incrementLastPlaceCount = `-- name: IncrementLastPlaceCount :one
UPDATE users
SET last_place_count = last_place_count + 1, updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio
`

func (q *Queries) IncrementLastPlaceCount(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, incrementLastPlaceCount, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.LastPlaceCount,
			&i.ProfilePicture,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    password_hash = $3,
    updated_at = NOW(),
    username = $4,
    bio = $5,
    profile_picture = $6
WHERE id = $1
RETURNING id, email, password_hash, created_at, updated_at, username, last_place_count, profile_picture, bio
`

type UpdateUserParams struct {
	ID             uuid.UUID   `json:"id"`
	Email          string      `json:"email"`
	PasswordHash   string      `json:"password_hash"`
	Username       string      `json:"username"`
	Bio            pgtype.Text `json:"bio"`
	ProfilePicture pgtype.Text `json:"profile_picture"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.Bio,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.LastPlaceCount,
		&i.ProfilePicture,
		&i.Bio,
	)
	return i, err
}
